apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: immich
  namespace: default
spec:
  chart:
    spec:
      chart: immich
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: immich
        namespace: flux-system
      version: 0.0.4
  interval: 15m
  timeout: 5m
  releaseName: immich
  values:
    postgresql:
      enabled: true
      global:
        postgresql:
          auth:
            username: immich
            database: immich
            password: "thisshouldnotbeyourpassword"
    redis:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
    common_env:
      REDIS_HOSTNAME: '{{ printf "%s-redis-master" (include "common.names.fullname" .) }}'
      DB_HOSTNAME: '{{ include "common.names.name" . }}-postgresql'
      DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
      DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
      JWT_SECRET: "randomstringthatissolongandpowerfulthatnoonecanguess"
      # ENABLE_MAPBOX is either true of false -> if true, you have to provide MAPBOX_KEY
      ENABLE_MAPBOX: false
      MAPBOX_KEY: ""
      # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
      DB_PASSWORD: "thisshouldnotbeyourpassword"
    server:
      enabled: true
      env:
        NODE_ENV: "production"
      service:
        main:
          enabled: true
          primary: true
          type: ClusterIP
          ports:
            http:
              enabled: true
              primary: true
              port: 3001
              protocol: HTTP
      image:
        # -- image repository
        repository: altran1502/immich-server # {"$imagepolicy": "flux-system:immich-server:name"}
        # -- image tag
        tag: v1.53.0 # {"$imagepolicy": "flux-system:immich-server:tag"}
        # -- image pull policy
        pullPolicy: IfNotPresent
      command: "/bin/sh"
      args:
        - "./start-server.sh"
    microservice:
      enabled: true
      env:
        NODE_ENV: "production"
      service:
        main:
          enabled: false
          primary: true
          type: ClusterIP
          ports:
            http:
              enabled: true
              primary: true
              port: 3001
              protocol: HTTP
      image:
        # -- image repository
        repository: altran1502/immich-server # {"$imagepolicy": "flux-system:immich-server:name"}
        # -- image tag
        tag: v1.53.0 # {"$imagepolicy": "flux-system:immich-server:tag"}
        # -- image pull policy
        pullPolicy: IfNotPresent
      command: "/bin/sh"
      args:
        - "./start-microservices.sh"
    machine_learning:
      enabled: true
      image:
        # -- image repository
        repository: altran1502/immich-machine-learning # {"$imagepolicy": "flux-system:immich-machine-learning:name"}
        # -- image tag
        tag: v1.53.0 # {"$imagepolicy": "flux-system:immich-machine-learning:tag"}
        # -- image pull policy
        pullPolicy: IfNotPresent
      service:
        main:
          enabled: true
          primary: true
          type: ClusterIP
          ports:
            http:
              enabled: true
              primary: true
              port: 3003
              protocol: HTTP
      env:
        NODE_ENV: "production"
        TRANSFORMERS_CACHE: /usr/src/app/.transformers_cache
    web:
      enabled: true
      image:
        # -- image repository
        repository: altran1502/immich-web # {"$imagepolicy": "flux-system:immich-web:name"}
        # -- image tag
        tag: v1.49.0 # {"$imagepolicy": "flux-system:immich-web:tag"}
        # -- image pull policy
        pullPolicy: IfNotPresent
      env:
        NODE_ENV: "production"
      service:
        main:
          enabled: true
          primary: true
          type: ClusterIP
          ports:
            http:
              enabled: true
              primary: true
              port: 3000
              protocol: HTTP
      command: "/bin/sh"
      args:
        - "./entrypoint.sh"
    proxy:
      enabled: true
      image:
        # -- image repository
        repository: altran1502/immich-proxy # {"$imagepolicy": "flux-system:immich-proxy:name"}
        # -- image tag
        tag: v1.49.0 # {"$imagepolicy": "flux-system:immich-proxy:tag"}
        # -- image pull policy
        pullPolicy: IfNotPresent
      service:
        main:
          enabled: true
          primary: true
          type: ClusterIP
          ports:
            http:
              enabled: true
              primary: true
              port: 8080
              protocol: HTTP
    ingress:
      main:
        enabled: true
        primary: false
        hosts:
          - host: photos.thecullensnz.com
            paths:
              - path: "/"
        tls:
          - hosts:
              - "*.thecullensnz.com"
            secretName: letsencrypt-wildcard-cert-thecullensnz.com
    persistence:
      library:
        enabled: true
        type: pvc
        mountPath: /usr/src/app/upload
        readOnly: false
        accessMode: ReadWriteMany
        size: 1Gi
        retain: false
      geocoding-dump:
        enabled: true
        type: emptyDir
        mountPath: /usr/src/app/.reverse-geocoding-dump
        # -- Set the medium to "Memory" to mount a tmpfs (RAM-backed filesystem) instead
        # of the storage medium that backs the node.
        medium: # Memory
        # -- If the `SizeMemoryBackedVolumes` feature gate is enabled, you can
        # specify a size for memory backed volumes.
        sizeLimit: # 1Gi
      transformers-cache:
        enabled: true
        type: emptyDir
        mountPath: /usr/src/app/.transformers_cache
        # -- Set the medium to "Memory" to mount a tmpfs (RAM-backed filesystem) instead
        # of the storage medium that backs the node.
        medium: # Memory
        # -- If the `SizeMemoryBackedVolumes` feature gate is enabled, you can
        # specify a size for memory backed volumes.
        sizeLimit: # 1Gi
    global:
      # -- Set an override for the prefix of the fullname
      nameOverride:
      # -- Set the entire name definition
      fullnameOverride:
      # -- Set additional global labels. Helm templates can be used.
      labels: {}
      # -- Set additional global annotations. Helm templates can be used.
      annotations: {}
    controller:
      # -- enable the controller.
      enabled: false
    serviceAccount:
      create: false
    # -- Probe configuration
    # -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    # @default -- See below
    probes:
      # -- Liveness probe configuration
      # @default -- See below
      liveness:
        # -- Enable the liveness probe
        enabled: true
        # -- Set this to `true` if you wish to specify your own livenessProbe
        custom: false
        # -- The spec field contains the values for the default livenessProbe.
        # If you selected `custom: true`, this field holds the definition of the livenessProbe.
        # @default -- See below
        spec:
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      # -- Redainess probe configuration
      # @default -- See below
      readiness:
        # -- Enable the readiness probe
        enabled: true
        # -- Set this to `true` if you wish to specify your own readinessProbe
        custom: false
        # -- The spec field contains the values for the default readinessProbe.
        # If you selected `custom: true`, this field holds the definition of the readinessProbe.
        # @default -- See below
        spec:
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      # -- Startup probe configuration
      # @default -- See below
      startup:
        # -- Enable the startup probe
        enabled: true
        # -- Set this to `true` if you wish to specify your own startupProbe
        custom: false
        # -- The spec field contains the values for the default startupProbe.
        # If you selected `custom: true`, this field holds the definition of the startupProbe.
        # @default -- See below
        spec:
          initialDelaySeconds: 0
          timeoutSeconds: 1
          ## This means it has a maximum of 5*30=150 seconds to start up before it fails
          periodSeconds: 5
          failureThreshold: 30
    termination:
      gracePeriodSeconds:
